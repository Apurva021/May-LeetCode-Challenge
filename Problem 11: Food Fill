This question can be solved using bfs.
So i have created a queue.
Insert the source element into the queue.

while(queue is not empty)
{
  remove first point from queue
  check in all four directions if any point has same value then put that into the queue
  change the color of the point first removed to the newColor.
}

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        int n=image.length,m=image[0].length;
        LinkedList<Pair> queue = new LinkedList<>();
        boolean visited[][]= new boolean[n][m];
        queue.add(new Pair(sr,sc));
        visited[sr][sc]=true;
        while(!queue.isEmpty())
        {
            Pair p=queue.pollFirst();
            int x=p.x;
            int y=p.y;
            int val=image[x][y];
            if(x-1>=0 && !visited[x-1][y] && image[x-1][y]==val)
            {
                queue.add(new Pair(x-1,y));
                visited[x-1][y]=true;
            }
            
            if(x+1<n && !visited[x+1][y] && image[x+1][y]==val) 
            {
                queue.add(new Pair(x+1,y));
                visited[x+1][y]=true;
            }
            
            if((y-1)>=0 && !visited[x][y-1] && image[x][y-1]==val)
            {
                queue.add(new Pair(x,y-1));
                visited[x][y-1]=true;
            }
            
            if((y+1)<m && !visited[x][y+1] && image[x][y+1]==val)
            {
                queue.add(new Pair(x,y+1));
                visited[x][y+1]=true;
            }
            
            image[x][y]=newColor;
        }
        
        return image;
    }
}
class Pair
{
    int x,y;
    Pair(int i, int j)
    {
        x=i;
        y=j;
    }
}

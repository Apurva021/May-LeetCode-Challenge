I have created a hashmap which will store the frequency of each character in the given string.

Now till the hashmap is not empty, i traverse over the map to find the character which has greatest frequency.
Then i append that character into a stringbuilder. And then remove it from the hashmap.

The time complexity can be further improved, if just sort the hashmap according to the value.

class Solution {
    public String frequencySort(String str) {
        char s[]=str.toCharArray();
        HashMap<Character,Integer> hm = new HashMap<Character,Integer>();
        for(char c:s)
        {
            hm.put(c,hm.getOrDefault(c,0)+1);
        }
        StringBuilder ans=new StringBuilder();
        while(hm.size()>0)
        {
            int f=0;
            char ch=' ';
            for(char c:hm.keySet())
            {
                if(hm.get(c)>f)
                {
                    ch=c;
                    f=hm.get(c);
                }
            }
            for(int i=0;i<f;++i) ans.append(ch);
            hm.remove(ch);
        }
        return ans.toString();
        
    }
}

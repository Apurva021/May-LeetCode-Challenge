In this question we need to use the concept of bipartite graph.
But wait? where's the graph?
Well, we need to construct the graph from the dislikes[][] array.

I have used the standard approach of vertex coloring to find whether the graph is bipartite or not.
If a vertex is not visited then i color it '1'.
Then i call the dfs function over the vertex and pass the color of parent as parameter.
Then for every child i check if it has the same colo as it's parent.
If it has the same color, return false.
else we assign it color '2' if the parent color is '1' or vice versa.

Solution:
class Solution {
    
    static ArrayList<Integer> al[];
    static int color[];
    static boolean visited[];
    
    static boolean isBipartite(int n)
    {
        boolean ans=true;
        for(int i=0;i<=n;++i)
        {
            if(!visited[i]) ans=dfsUtil(i,1);
            
            if(ans==false) break;
        }
        return ans;
    }
    
    static boolean dfsUtil(int src, int c)
    {
        visited[src]=true;
        color[src]=c;
        for(int child:al[src])
        {
            if(!visited[child])
            {
                if(c==1) dfsUtil(child,2);
                else dfsUtil(child,1);
            }
            else if(color[child]==c)
            {
                return false;
            }
        }
        return true;
    }
    
    public boolean possibleBipartition(int n, int[][] dislikes) {
        al= new ArrayList[n+1];
        color=new int[n+1];
        visited=new boolean[n+1];
        for(int i=0;i<=n;++i) al[i]=new ArrayList<Integer>();
        for(int i=0;i<dislikes.length;++i)
        {
            int u=dislikes[i][0];
            int v=dislikes[i][1];
            al[u].add(v);
            al[v].add(u);
        }
        
        return isBipartite(n);
        //System.out.println(Arrays.toString(color));
        
    }
}
